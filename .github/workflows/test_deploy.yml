name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.15.0'

    - name: Install dependencies
      run: |
        npm install
        echo "Dependencies installed."

    - name: Run tests
      run: |
        npm test
        echo "Tests completed."

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: success()

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.15.0'

    - name: Install dependencies
      run: |
        npm install
        echo "Dependencies installed."

    - name: Build application
      run: |
        npm run build
        echo "Build completed."

    - name: List build directory
      run: |
        echo "Listing contents of the build directory..."
        ls -la .next
        ls -la # List all directories to verify .next presence

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build
    if: success()

    steps:
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.6.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Copy build files to EC2
      run: |
        # Ensure .next directory exists
        if [ -d ".next" ]; then
          echo ".next directory exists, proceeding with SCP..."
          scp -o StrictHostKeyChecking=no -r .next ubuntu@16.171.146.74:~/ci_cd/.next || { echo "Error copying files."; exit 1; }
        else
          echo ".next directory does not exist"
          exit 1
        fi

    - name: Connect to EC2 and deploy
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@16.171.146.74 << 'EOF'
          # Navigate to the deployment directory
          cd ~/ci_cd

          # Install dependencies (if needed)
          npm install --production || { echo "Error installing dependencies."; exit 1; }

          # Restart the application using PM2
          pm2 restart ci_cd || { echo "Error restarting application."; exit 1; }

          # Check the status and logs
          pm2 status
          pm2 logs
        EOF
